{"version":3,"sources":["reportWebVitals.ts","components/movie.tsx","components/movies.tsx","App.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Movie","className","src","this","props","url","alt","title","disabled","nominated","nominatedSection","onClick","type","getButtonClasses","getButtonText","res","React","Component","Movies","movies","map","x","imdbID","App","requestId","worker","handleKeyUp","event","setState","searching","clearTimeout","setTimeout","fetchMovies","target","value","state","nominations","query","a","id","fetch","omdbKey","response","ok","Error","json","data","grouped","Search","forEach","Title","Poster","nominate","filter","y","length","results","key","push","catch","e","console","log","movie","mv","newMv","deNominate","icon","FontAwesomeIcons","spin","Fragment","onChange","placeholder","aria-label","aria-describedby","getSearchIcon","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3ee02bae.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\n\r\nexport interface MovieProps {\r\n    title: string;\r\n    imdbID: string;\r\n    url: string;\r\n    nominated: boolean;\r\n    nominatedSection: boolean;\r\n    onClick: () => void;\r\n}\r\n \r\nclass Movie extends React.Component<MovieProps> {\r\n\r\n    render() { \r\n        return (\r\n            <div className=\"card movie-card\" >\r\n                <img className=\"card-img-top movie-card-img\" src={this.props.url} alt={`Movie poster for ${this.props.title}`} />\r\n                <div className=\"card-body movie-card-body\">\r\n                    <span className=\"font-weight-normal\">{this.props.title}</span>\r\n                    <button disabled={this.props.nominated && !this.props.nominatedSection} onClick={this.props.onClick} type=\"button\" className={this.getButtonClasses()}>{this.getButtonText()}</button>\r\n                </div>\r\n            </div>   \r\n        );\r\n    }\r\n\r\n    private getButtonText(): string {\r\n        return this.props.nominatedSection ? \"Remove\" : (this.props.nominated ? \"Nominated\" : \"Vote\");\r\n    }\r\n\r\n    private getButtonClasses(): string {\r\n        let res = \"btn mt-2 \";\r\n        res += this.props.nominatedSection ? \"btn-danger\" : (this.props.nominated ? \"btn-secondary\" : \"btn-primary\");\r\n        return res;\r\n    }\r\n}\r\n \r\nexport default Movie;","import * as React from 'react';\r\nimport Movie, { MovieProps } from './movie';\r\n\r\nexport interface MoviesProps {\r\n    movies: MovieProps[];\r\n}\r\n \r\nexport interface MoviesState {\r\n    \r\n}\r\n \r\nclass Movies extends React.Component<MoviesProps, MoviesState> {\r\n    \r\n    render() { \r\n        return (\r\n            <div className=\"movie-container\">\r\n                {this.props.movies.map(x => {\r\n                    return (<Movie imdbID={x.imdbID}\r\n                        title={x.title}\r\n                        url={x.url}\r\n                        key={x.imdbID}\r\n                        nominated={x.nominated}\r\n                        nominatedSection={x.nominatedSection}\r\n                        onClick={x.onClick}\r\n                    />)\r\n                })}\r\n        </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default Movies;\r\n","import React, { ChangeEvent } from \"react\";\nimport logo from \"./logo.svg\";\nimport * as FontAwesomeIcons from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { MovieProps } from \"./components/movie\";\nimport Movies, { MoviesProps } from \"./components/movies\";\nimport { omdbKey } from './settings.json';\nimport \"./App.css\";\n\n\n\ninterface AppProps {}\n\ninterface AppState {\n\tmovies: MovieProps[];\n\tnominations: MovieProps[];\n\tsearching: boolean;\n}\n\nclass App extends React.Component<AppProps, AppState> {\n\tprivate requestId: number;\n\tprivate worker: any;\n\n\tconstructor(props: AppProps) {\n\t\tsuper(props);\n\t\tthis.requestId = 0;\n\t\tthis.state = {\n\t\t\tmovies: [],\n\t\t\tnominations: [],\n\t\t\tsearching: false,\n\t\t};\n\t}\n\n\tasync fetchMovies(query: string) {\n\t\tlet id = this.requestId;\n\t\tawait fetch(`https://www.omdbapi.com/?apikey=${omdbKey}&s=${query}`)\n\t\t.then((response: Response) => {\n\t\t\tif (!response.ok) throw new Error(\"Failed to fetch data\");\n\t\t\treturn response.json();\n\t\t})\n\t\t.then((data: any): MovieProps[] => {\n\t\t\t// Group the data on id because omdb can return duplicates\n\t\t\tlet grouped: { [id: string]: MovieProps } = {};\n\t\t\tdata.Search.forEach((x: any) => {\n\t\t\t\tgrouped[x.imdbID] = {\n\t\t\t\t\ttitle: x.Title,\n\t\t\t\t\timdbID: x.imdbID,\n\t\t\t\t\turl: x.Poster,\n\t\t\t\t\tonClick: () => { this.nominate(x); },\n\t\t\t\t\tnominated: this.state.nominations.filter((y) => y.imdbID === x.imdbID).length > 0,\n\t\t\t\t\tnominatedSection: false,\n\t\t\t\t};\n\t\t\t});\n\t\t\tlet results: MovieProps[] = [];\n\t\t\tfor (let key in grouped) {\n\t\t\t\tresults.push(grouped[key]);\n\t\t\t}\n\t\t\treturn results;\n\t\t})\n\t\t.then((movies: MovieProps[]) => {\n\t\t\t// Only update the state if this is the most recent request\n\t\t\tif (this.requestId === id) this.setState({ movies: movies, searching: false });\n\t\t})\n\t\t.catch((e: Error) => {\n\t\t\tconsole.log(e);\n\t\t});\n\t}\n\n\tprivate nominate(movie: MovieProps) {\n\t\tif (this.state.nominations.length >= 5) { return; }\n\t\tlet nominations = [...this.state.nominations];\n\t\tlet movies = [...this.state.movies];\n\t\tlet mv = movies.filter((x) => x.imdbID === movie.imdbID)[0];\n\t\tmv.nominated = true;\n\t\tlet newMv = { ...mv };\n\t\tnewMv.nominatedSection = true;\n\t\tnewMv.onClick = () => {\n\t\t\tthis.deNominate(newMv);\n\t\t};\n\t\tnominations.push(newMv);\n\t\tthis.setState({ nominations: nominations, movies: movies });\n\t}\n\n\tprivate deNominate(movie: MovieProps) {\n\t\tlet movies = [...this.state.movies];\n\t\tlet mv = movies.filter((x) => x.imdbID === movie.imdbID)[0];\n\t\tif (mv) {\n\t\t\tmv.nominated = false;\n\t\t\tmv.onClick = () => {\n\t\t\t\tthis.nominate(mv);\n\t\t\t};\n\t\t}\n\t\tlet nominations = [...this.state.nominations];\n\t\tnominations = nominations.filter((x) => x.imdbID !== movie.imdbID);\n\n\t\tthis.setState({ nominations: nominations, movies: movies });\n\t}\n\n\thandleKeyUp = (event: ChangeEvent<HTMLInputElement>) => {\n\t\tthis.setState({searching: true });\n\t\tthis.requestId++;\n\t\t// because I already used half of my api requests\n\t\tclearTimeout(this.worker);\n\t\tthis.worker = setTimeout(() => {\n\t\t\tthis.fetchMovies(event.target.value);\n\t\t}, 300);\n\t};\n\n\tgetSearchIcon(): JSX.Element {\n\t\tif (this.state.searching)\n\t\t\treturn <FontAwesomeIcon icon={FontAwesomeIcons.faSpinner} spin></FontAwesomeIcon>\n\t\telse\n\t\t\treturn <FontAwesomeIcon icon={FontAwesomeIcons.faSearch}></FontAwesomeIcon>\n\t} \n\n\trender() {\n\t\treturn (\n\t\t\t<React.Fragment>\n\t\t\t\t<div className=\"jumbotron jumbotron-fluid bg-dark text-light text-center\">\n\t\t\t\t\t<h1 className=\"display-1\">The Shoppies</h1>\n\t\t\t\t\t<h3 className=\"lead my-4\">\n\t\t\t\t\t\tNominate your favourite movies for the Shoppies!\n\t\t\t\t\t</h3>\n\t\t\t\t\t<div className=\"container\">\n\t\t\t\t\t\t<div className=\"input-group\">\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\tonChange={this.handleKeyUp}\n\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\tclassName=\"form-control form-control-lg\"\n\t\t\t\t\t\t\t\tplaceholder=\"Search Movies\"\n\t\t\t\t\t\t\t\taria-label=\"Search Movies\"\n\t\t\t\t\t\t\t\taria-describedby=\"basic-addon2\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<div className=\"input-group-append\">\n\t\t\t\t\t\t\t\t<button className=\"btn btn-light\" type=\"button\">\n\t\t\t\t\t\t\t\t\t{this.getSearchIcon()}\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t\t<div className=\"container\">\n\t\t\t\t\t<div className=\"row mb-4\">\n\t\t\t\t\t\t<div className=\"col\">\n\t\t\t\t\t\t\t<h4 className=\"my-4 text-dark\">\n\t\t\t\t\t\t\t\tNominations ({this.state.nominations.length}/5)\n\t\t\t\t\t\t\t</h4>\n\t\t\t\t\t\t\t<hr className=\"my-4 bg-light\" />\n\t\t\t\t\t\t\t<Movies movies={this.state.nominations} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"row mt-4\">\n\t\t\t\t\t\t<div className=\"col\">\n\t\t\t\t\t\t\t<h4 className=\"my-4 text-dark\">\n\t\t\t\t\t\t\t\tShowing Results ({this.state.movies.length})\n\t\t\t\t\t\t\t</h4>\n\t\t\t\t\t\t\t<hr className=\"my-4\" />\n\t\t\t\t\t\t\t<Movies movies={this.state.movies} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t</React.Fragment>\n\t\t);\n\t}\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App'\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}